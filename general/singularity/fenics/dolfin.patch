unchanged:
--- /home/finesse/xfong/proj/dolfin/dolfin/la/SUNDIALSNVector.h	2020-05-23 16:34:44.131919649 +0800
+++ dolfin/la/SUNDIALSNVector.h	2020-05-23 22:50:18.591544834 +0800
@@ -435,6 +435,8 @@
                                         NULL,                  //N_VSpace,    //   void        (*N_VSpace)(NVector, long int *, long int *);
                                         N_VGetArrayPointer,    //   realtype*   (*N_VGetArrayPointer)(NVector);
                                         N_VSetArrayPointer,    //   void        (*N_VSetArrayPointer)(realtype *, NVector);
+                                        NULL,                  //   void*        (*N_VGetCommunicator)(NVector);
+                                        NULL,                  //   sunindextype (*N_VGetLength)(NVector);
                                         N_VLinearSum,    //   void        (*N_VLinearSum)(realtype, NVector, realtype, NVector, NVector);
                                         N_VConst,          //   void        (*N_VConst)(realtype, NVector);
                                         N_VProd,    //   void        (*N_VProd)(NVector, NVector, NVector);
@@ -453,7 +455,28 @@
                                         N_VCompare,    //   void        (*N_VCompare)(realtype, NVector, NVector);
                                         N_VInvTest,    //   booleantype (*N_VInvtest)(NVector, NVector);
                                         N_VConstrMask,    //   booleantype (*N_VConstrMask)(NVector, NVector, NVector);
-                                        N_VMinQuotient};    //   realtype    (*N_VMinQuotient)(NVector, NVector);
+                                        N_VMinQuotient,     //   realtype    (*N_VMinQuotient)(NVector, NVector);
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL,               //
+                                        NULL};               //
   };
 
 
unchanged:
--- /home/finesse/xfong/proj/dolfin/dolfin/ts/CVode.cpp	2020-05-23 16:34:44.151919826 +0800
+++ dolfin/ts/CVode.cpp	2020-05-23 23:04:40.823191560 +0800
@@ -30,7 +30,6 @@
 
 #include <cvode/cvode.h>
 #include <cvode/cvode_bandpre.h>
-#include <cvode/cvode_impl.h>
 #include <cvode/cvode_spils.h>
 #include <sunlinsol/sunlinsol_spgmr.h>
 #include <sundials/sundials_dense.h>
@@ -44,10 +43,10 @@
 using namespace dolfin;
 
 //-----------------------------------------------------------------------------
-CVode::CVode(LMM cv_lmm, ITER cv_iter) : _ls(NULL), _t(0.0), _cv_iter(cv_iter)
+CVode::CVode(LMM cv_lmm) : _ls(NULL), _t(0.0)
 {
   // Create CVode memory block
-  _cvode_mem = CVodeCreate(cv_lmm, cv_iter);
+  _cvode_mem = CVodeCreate(cv_lmm);
   dolfin_assert(_cvode_mem);
 
   // Point user_data back to this object
@@ -79,21 +78,18 @@
 
   CVodeSetMaxNumSteps(_cvode_mem, mxsteps);
 
-  if (_cv_iter == CV_NEWTON)
-  {
-    dolfin_debug("Initialising Newton solver");
-    _ls = SUNSPGMR(_u->nvector(), PREC_LEFT, 0);
-    flag = CVSpilsSetLinearSolver(_cvode_mem, _ls);
-    dolfin_assert(flag == CV_SUCCESS);
-
-    // Set the preconditioner solver function to be called by CVode solver
-    flag = CVSpilsSetPreconditioner(_cvode_mem, NULL, prec_solve);
-    dolfin_assert(flag == CV_SUCCESS);
-
-    // Set the Jacobian function to be called by CVode solver
-    flag = CVSpilsSetJacTimes(_cvode_mem, NULL, f_jac);
-    dolfin_assert(flag == CV_SUCCESS);
-  }
+  dolfin_debug("Initialising Newton solver");
+  _ls = SUNSPGMR(_u->nvector(), PREC_LEFT, 0);
+  flag = CVSpilsSetLinearSolver(_cvode_mem, _ls);
+  dolfin_assert(flag == CV_SUCCESS);
+
+  // Set the preconditioner solver function to be called by CVode solver
+  flag = CVSpilsSetPreconditioner(_cvode_mem, NULL, prec_solve);
+  dolfin_assert(flag == CV_SUCCESS);
+
+  // Set the Jacobian function to be called by CVode solver
+  flag = CVSpilsSetJacTimes(_cvode_mem, NULL, f_jac);
+  dolfin_assert(flag == CV_SUCCESS);
 
 }
 //-----------------------------------------------------------------------------
@@ -223,23 +219,41 @@
 std::map<std::string, double> CVode::statistics()
 {
   std::map<std::string, double> stats;
-  auto cv = static_cast<const CVodeMem>(_cvode_mem);
 
-  stats["Steps"] = cv->cv_nst;
-  stats["RHSEvals"] = cv->cv_nfe;
-  stats["LinSolvSetups"] = cv->cv_nsetups;
-  stats["ErrTestFails"] = cv->cv_netf;
-  stats["LastOrder"] = cv->cv_qu;
-  stats["CurrentOrder"] = cv->cv_next_q;
-  stats["StabLimOrderReds"] = cv->cv_nor;
-  stats["ActualInitStep"] = cv->cv_h0u;
-  stats["LastStep"] = cv->cv_hu;
-  stats["CurrentStep"] = cv->cv_next_h;
-  stats["CurrentTime"] = cv->cv_tn;
-  stats["TolScaleFactor"] = cv->cv_tolsf;
-  stats["NumGEvals"] = cv->cv_nge;
-  stats["NumNonlinSolvIter"] = cv->cv_nni;
-  stats["NumNonlinSolvConvFails"] = cv->cv_ncfn;
+  int tmpInt;
+  long int tmpLongInt;
+  realtype tmpReal;
+
+  CVodeGetNumSteps(_cvode_mem, &tmpLongInt);
+  stats["Steps"] = tmpLongInt;
+  CVodeGetNumRhsEvals(_cvode_mem, &tmpLongInt);
+  stats["RHSEvals"] = tmpLongInt;
+  CVodeGetNumLinSolvSetups(_cvode_mem, &tmpLongInt);
+  stats["LinSolvSetups"] = tmpLongInt;
+  CVodeGetNumErrTestFails(_cvode_mem, &tmpLongInt);
+  stats["ErrTestFails"] = tmpLongInt;
+  CVodeGetLastOrder(_cvode_mem, &tmpInt);
+  stats["LastOrder"] = tmpInt;
+  CVodeGetCurrentOrder(_cvode_mem, &tmpInt);
+  stats["CurrentOrder"] = tmpInt;
+  CVodeGetNumStabLimOrderReds(_cvode_mem, &tmpLongInt);
+  stats["StabLimOrderReds"] = tmpLongInt;
+  CVodeGetActualInitStep(_cvode_mem, &tmpReal);
+  stats["ActualInitStep"] = tmpReal;
+  CVodeGetLastStep(_cvode_mem, &tmpReal);
+  stats["LastStep"] = tmpReal;
+  CVodeGetCurrentStep(_cvode_mem, &tmpReal);
+  stats["CurrentStep"] = tmpReal;
+  CVodeGetCurrentTime(_cvode_mem, &tmpReal);
+  stats["CurrentTime"] = tmpReal;
+  CVodeGetTolScaleFactor(_cvode_mem, &tmpReal);
+  stats["TolScaleFactor"] = tmpReal;
+  CVodeGetNumGEvals(_cvode_mem, &tmpLongInt);
+  stats["NumGEvals"] = tmpLongInt;
+  CVodeGetNumNonlinSolvIters(_cvode_mem, &tmpLongInt);
+  stats["NumNonlinSolvIter"] = tmpLongInt;
+  CVodeGetNumNonlinSolvConvFails(_cvode_mem, &tmpLongInt);
+  stats["NumNonlinSolvConvFails"] = tmpLongInt;
 
   return stats;
 }
unchanged:
--- /home/finesse/xfong/proj/dolfin/dolfin/ts/CVode.h	2020-05-23 16:34:44.151919826 +0800
+++ dolfin/ts/CVode.h	2020-05-23 17:23:49.325503949 +0800
@@ -23,7 +23,6 @@
 #include <dolfin/la/SUNDIALSNVector.h>
 
 #include <cvode/cvode.h>
-#include <cvode/cvode_impl.h>
 #include <sunlinsol/sunlinsol_spgmr.h>
 #include <sundials/sundials_dense.h>
 #include <sundials/sundials_types.h>
@@ -39,14 +38,12 @@
     // These enums are used by PYBIND11 to map the definitions from C
     enum LMM { cv_bdf = CV_BDF, cv_adams = CV_ADAMS };
 
-    enum ITER { cv_functional = CV_FUNCTIONAL, cv_newton = CV_NEWTON };
-
     /// Constructor
     /// @param cv_lmm
     ///   linear multistep method
     /// @param cv_iter
     ///   iteration type
-    CVode(LMM cv_lmm, ITER cv_iter);
+    CVode(LMM cv_lmm);
 
     /// Destructor
     virtual ~CVode();
@@ -182,9 +179,6 @@
 
     // Pointer to CVode memory struct
     void* _cvode_mem;
-
-    // Remember iter method between constructor and init
-    ITER _cv_iter;
   };
 
 }
only in patch2:
unchanged:
--- /home/finesse/xfong/proj/dolfin/python/src/ts.cpp	2020-05-23 16:34:44.203920285 +0800
+++ python/src/ts.cpp	2020-05-23 23:42:41.267632999 +0800
@@ -69,7 +69,7 @@
     py::class_<dolfin::CVode, PyCVode, std::shared_ptr<dolfin::CVode>>cvode(m,"CVode");
     //dolfin::CVode
     cvode
-      .def(py::init<dolfin::CVode::LMM, dolfin::CVode::ITER>())
+      .def(py::init<dolfin::CVode::LMM>())
       .def("init", &dolfin::CVode::init, py::arg("u0"), py::arg("atol"),
         py::arg("rtol"), py::arg("mxsteps")=0)
       .def("set_time", &dolfin::CVode::set_time, py::arg("t0"))
@@ -84,10 +84,6 @@
       .value("CV_BDF", dolfin::CVode::LMM::cv_bdf)
       .value("CV_ADAMS", dolfin::CVode::LMM::cv_adams);
 
-    py::enum_<dolfin::CVode::ITER>(cvode,"ITER")
-      .value("CV_FUNCTIONAL", dolfin::CVode::ITER::cv_functional)
-      .value("CV_NEWTON", dolfin::CVode::ITER::cv_newton);
-
     #endif
 
   }
